package org.opensourceway.uvp.dao;

import org.opensourceway.uvp.entity.Vulnerability;
import org.opensourceway.uvp.enums.VulnSource;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.List;
import java.util.UUID;

public interface VulnerabilityRepository extends JpaRepository<Vulnerability, UUID> {
    @Query(value = "SELECT * FROM vulnerability WHERE source = :#{#source?.name()} AND vuln_id IN :vulnIds",
            nativeQuery = true)
    List<Vulnerability> findBySourceAndVulnIds(VulnSource source, List<String> vulnIds);

    @Query(value = """
            WITH vn AS (SELECT vuln_id FROM vulnerability WHERE vuln_id in :vulnIds)
            SELECT v.*
            FROM vulnerability v
                LEFT JOIN LATERAL UNNEST(v.aliases) alias ON TRUE
            WHERE (alias in (SELECT * FROM vn) OR vuln_id in (SELECT * FROM vn))
                AND source IN :sources
            """,
            nativeQuery = true)
    List<Vulnerability> findBySourcesAndVulnIds(List<String> sources, List<String> vulnIds);

    @Query(value = "SELECT DISTINCT(vuln_id) FROM vulnerability ORDER BY vuln_id", nativeQuery = true)
    List<String> findDistinctVulnIds();

    @Query(value = """
            SELECT DISTINCT(v.*)
            FROM vulnerability v
            	LEFT JOIN LATERAL UNNEST(v.aliases) alias ON TRUE
                JOIN affected_package ap ON v.id = ap.vuln_id
            WHERE
                v.withdrawn IS NULL
                AND v.source = :#{#source?.name()}
                AND (
                    (:accurate IS FALSE AND ap.purl LIKE CONCAT('%', :purl, '%'))
                    OR (:accurate IS TRUE AND ap.purl = :purl)
                )
            ORDER BY
                v.modified DESC NULLS LAST
            LIMIT :limit OFFSET :offset
            """,
            nativeQuery = true)
    List<Vulnerability> searchBySourceAndPurl(VulnSource source, String purl, Boolean accurate,
                                              Integer limit, Integer offset);

    @Query(value = """
            SELECT DISTINCT(v.*)
            FROM vulnerability v
            	LEFT JOIN LATERAL UNNEST(v.aliases) alias ON TRUE
                JOIN affected_package ap ON v.id = ap.vuln_id
            WHERE
                v.withdrawn IS NULL
                AND v.source = :#{#source?.name()}
                AND (
            	    ap.name LIKE CONCAT('%', :keyword, '%')
                    OR v.vuln_id LIKE CONCAT('%', :keyword, '%')
                    OR alias LIKE CONCAT('%', :keyword, '%')
                )
            ORDER BY
                v.modified DESC NULLS LAST
            LIMIT :limit OFFSET :offset
            """,
            nativeQuery = true)
    List<Vulnerability> searchBySourceAndKeyword(VulnSource source, String keyword, Integer limit, Integer offset);

    @Query(value = "SELECT * FROM vulnerability WHERE source = :#{#source?.name()} AND vuln_id = :vulnId",
            nativeQuery = true)
    Vulnerability findBySourceAndVulnIds(VulnSource source, String vulnId);
}